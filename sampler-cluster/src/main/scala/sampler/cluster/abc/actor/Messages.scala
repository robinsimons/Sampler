/*
 * Copyright (c) 2012-13 Crown Copyright 
 *                       Animal Health and Veterinary Laboratories Agency
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package sampler.cluster.abc.actor

import sampler.cluster.abc.Weighted
import sampler.cluster.abc.config.ABCConfig
import scala.language.existentials
import sampler.cluster.abc.Model
import sampler.cluster.abc.Scored
import akka.actor.ActorRef
import sampler.cluster.abc.algorithm.Generation
import sampler.cluster.abc.Weighted

//TODO comment who sends what to whom

/**
 * Sent from [[sampler.cluster.]]
 */
case class Start[P](generationZero: Generation[P])
case class Report[P](generationId: Int, tolerance: Double, posterior: Seq[P])
//case class Finished()
case class ReportCompleted[P](report: Report[P])

sealed trait Job[P]
case class GenerateJob[P](population: Map[P, Double], config: ABCConfig) extends Job[P]
case class WeighJob[P](scored: Seq[Tagged[Scored[P]]], previousPopulation: Map[P, Double], tolerance: Double) extends Job[P]

sealed trait WorkerResult[P]	// Things that are generated by workers
case class TaggedScoredSeq[P](seq: Seq[Tagged[Scored[P]]]) extends WorkerResult[P]
case class TaggedWeighedSeq[P](seq: Seq[Tagged[Weighted[P]]]) extends WorkerResult[P]
case class MixPayload[P](tss: TaggedScoredSeq[P])
case object Failed

case class Abort()
case class Aborted()
